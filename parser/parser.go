// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import "github.com/tesujiro/exp_yacc/ast"

type yySymType struct {
	yys        int
	token      ast.Token
	stmt_if    ast.Stmt
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57367
	yyEofCode = 57344
	ANDAND    = 57360
	BREAK     = 57364
	CONTINUE  = 57365
	ELSE      = 57359
	EQEQ      = 57354
	FALSE     = 57350
	FOR       = 57363
	FUNC      = 57352
	GE        = 57356
	IDENT     = 57346
	IF        = 57358
	LE        = 57357
	LEN       = 57362
	NEQ       = 57355
	NIL       = 57351
	NUMBER    = 57347
	OROR      = 57361
	RETURN    = 57353
	STRING    = 57348
	TRUE      = 57349
	UNARY     = 57366
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -63
)

var (
	yyPrec = map[int]int{
		'=':    0,
		OROR:   1,
		ANDAND: 2,
		IDENT:  3,
		EQEQ:   4,
		NEQ:    4,
		'>':    5,
		'<':    5,
		GE:     5,
		LE:     5,
		'+':    6,
		'-':    6,
		'*':    7,
		'/':    7,
		'%':    7,
		UNARY:  8,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (93x)
		43:    1,  // '+' (90x)
		45:    2,  // '-' (90x)
		123:   3,  // '{' (86x)
		125:   4,  // '}' (79x)
		44:    5,  // ',' (72x)
		10:    6,  // '\n' (70x)
		57344: 7,  // $end (61x)
		59:    8,  // ';' (57x)
		57346: 9,  // IDENT (55x)
		61:    10, // '=' (51x)
		57350: 11, // FALSE (50x)
		57352: 12, // FUNC (50x)
		57362: 13, // LEN (50x)
		57351: 14, // NIL (50x)
		57347: 15, // NUMBER (50x)
		57348: 16, // STRING (50x)
		57349: 17, // TRUE (50x)
		41:    18, // ')' (44x)
		37:    19, // '%' (40x)
		42:    20, // '*' (40x)
		47:    21, // '/' (40x)
		60:    22, // '<' (40x)
		62:    23, // '>' (40x)
		91:    24, // '[' (40x)
		57360: 25, // ANDAND (40x)
		57354: 26, // EQEQ (40x)
		57356: 27, // GE (40x)
		57357: 28, // LE (40x)
		57355: 29, // NEQ (40x)
		57361: 30, // OROR (40x)
		57359: 31, // ELSE (38x)
		93:    32, // ']' (35x)
		57368: 33, // expr (31x)
		57358: 34, // IF (19x)
		57364: 35, // BREAK (18x)
		57365: 36, // CONTINUE (18x)
		57363: 37, // FOR (18x)
		57371: 38, // newLine (18x)
		57353: 39, // RETURN (18x)
		57372: 40, // newLines (14x)
		57374: 41, // opt_term (9x)
		57379: 42, // term (9x)
		57369: 43, // exprs (8x)
		57375: 44, // program (8x)
		57378: 45, // stmts (8x)
		57373: 46, // opt_newLines (5x)
		57370: 47, // ident_args (2x)
		57376: 48, // stmt (2x)
		57377: 49, // stmt_if (2x)
		57367: 50, // $default (0x)
		57345: 51, // error (0x)
		57366: 52, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"'{'",
		"'}'",
		"','",
		"'\\n'",
		"$end",
		"';'",
		"IDENT",
		"'='",
		"FALSE",
		"FUNC",
		"LEN",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"')'",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'['",
		"ANDAND",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"OROR",
		"ELSE",
		"']'",
		"expr",
		"IF",
		"BREAK",
		"CONTINUE",
		"FOR",
		"newLine",
		"RETURN",
		"newLines",
		"opt_term",
		"term",
		"exprs",
		"program",
		"stmts",
		"opt_newLines",
		"ident_args",
		"stmt",
		"stmt_if",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {44, 1},
		2:  {44, 2},
		3:  {45, 2},
		4:  {45, 3},
		5:  {48, 3},
		6:  {48, 3},
		7:  {48, 1},
		8:  {48, 4},
		9:  {48, 5},
		10: {48, 1},
		11: {48, 1},
		12: {48, 1},
		13: {49, 5},
		14: {49, 7},
		15: {49, 5},
		16: {49, 2},
		17: {43, 0},
		18: {43, 1},
		19: {43, 4},
		20: {33, 1},
		21: {33, 1},
		22: {33, 1},
		23: {33, 1},
		24: {33, 1},
		25: {33, 1},
		26: {33, 4},
		27: {33, 8},
		28: {33, 4},
		29: {33, 4},
		30: {33, 7},
		31: {33, 5},
		32: {33, 4},
		33: {33, 4},
		34: {33, 2},
		35: {33, 2},
		36: {33, 3},
		37: {33, 3},
		38: {33, 3},
		39: {33, 3},
		40: {33, 3},
		41: {33, 3},
		42: {33, 3},
		43: {33, 3},
		44: {33, 3},
		45: {33, 3},
		46: {33, 3},
		47: {33, 3},
		48: {33, 3},
		49: {33, 3},
		50: {47, 0},
		51: {47, 1},
		52: {47, 4},
		53: {41, 0},
		54: {41, 1},
		55: {42, 2},
		56: {42, 1},
		57: {42, 1},
		58: {46, 0},
		59: {46, 1},
		60: {40, 1},
		61: {40, 2},
		62: {38, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [132][]uint16{
		// 0
		{10, 10, 10, 10, 5: 10, 71, 10, 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 69, 65, 67, 44: 64, 66},
		{7: 63},
		{96, 94, 95, 93, 62, 46, 7: 62, 9: 85, 46, 89, 91, 92, 90, 86, 87, 88, 33: 77, 83, 81, 82, 80, 39: 84, 43: 78, 48: 194, 79},
		{4: 10, 6: 71, 10, 68, 38: 70, 40: 69, 74, 75},
		{9, 9, 9, 9, 9, 9, 7: 9, 9: 9, 9, 9, 9, 9, 9, 9, 9, 9, 34: 9, 9, 9, 9, 39: 9},
		// 5
		{6, 6, 6, 6, 6, 6, 71, 6, 9: 6, 6, 6, 6, 6, 6, 6, 6, 6, 34: 6, 6, 6, 6, 70, 6, 73},
		{7, 7, 7, 7, 7, 7, 71, 7, 9: 7, 7, 7, 7, 7, 7, 7, 7, 7, 34: 7, 7, 7, 7, 72, 7},
		{3, 3, 3, 3, 3, 3, 3, 3, 9: 3, 3, 3, 3, 3, 3, 3, 3, 3, 34: 3, 3, 3, 3, 39: 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 9: 1, 1, 1, 1, 1, 1, 1, 1, 1, 34: 1, 1, 1, 1, 39: 1},
		{2, 2, 2, 2, 2, 2, 2, 2, 9: 2, 2, 2, 2, 2, 2, 2, 2, 2, 34: 2, 2, 2, 2, 39: 2},
		// 10
		{8, 8, 8, 8, 8, 8, 71, 8, 9: 8, 8, 8, 8, 8, 8, 8, 8, 8, 34: 8, 8, 8, 8, 72, 8},
		{4: 61, 7: 61},
		{96, 94, 95, 93, 9, 46, 7: 9, 9: 85, 46, 89, 91, 92, 90, 86, 87, 88, 33: 77, 83, 81, 82, 80, 39: 84, 43: 78, 48: 76, 79},
		{4: 59, 6: 59, 59, 59},
		{98, 103, 104, 4: 51, 45, 51, 51, 51, 10: 192, 19: 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101},
		// 15
		{5: 129, 10: 190},
		{4: 56, 6: 56, 56, 56, 31: 181},
		{96, 94, 95, 173, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 174},
		{4: 53, 6: 53, 53, 53},
		{4: 52, 6: 52, 52, 52},
		// 20
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 169},
		{96, 94, 95, 93, 46, 46, 46, 46, 46, 85, 11: 89, 91, 92, 90, 86, 87, 88, 31: 46, 33: 127, 43: 168},
		{162, 43, 43, 43, 43, 43, 43, 43, 43, 10: 43, 18: 43, 43, 43, 43, 43, 43, 163, 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 10: 42, 18: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 10: 41, 18: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 25
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 10: 40, 18: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 10: 39, 18: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 10: 38, 18: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{146, 9: 145},
		{142},
		// 30
		{5, 5, 5, 5, 5, 5, 71, 9: 5, 11: 5, 5, 5, 5, 5, 5, 5, 38: 70, 40: 132, 46: 138},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 137},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 136},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 97},
		{98, 103, 104, 18: 100, 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101},
		// 35
		{96, 94, 95, 93, 5: 46, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 46, 33: 127, 43: 134},
		{96, 94, 95, 93, 5: 46, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 32: 46, 127, 43: 128},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 10: 27, 18: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 126},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 125},
		// 40
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 124},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 123},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 122},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 121},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 120},
		// 45
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 119},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 118},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 117},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 116},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 115},
		// 50
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 114},
		{98, 103, 104, 14, 14, 14, 14, 14, 14, 10: 14, 18: 14, 107, 105, 106, 14, 14, 99, 14, 14, 14, 14, 14, 14, 14, 14},
		{98, 103, 104, 15, 15, 15, 15, 15, 15, 10: 15, 18: 15, 107, 105, 106, 15, 15, 99, 15, 15, 15, 15, 15, 15, 15, 15},
		{98, 103, 104, 16, 16, 16, 16, 16, 16, 10: 16, 18: 16, 107, 105, 106, 16, 16, 99, 16, 16, 16, 16, 16, 16, 16, 16},
		{98, 103, 104, 17, 17, 17, 17, 17, 17, 10: 17, 18: 17, 107, 105, 106, 17, 17, 99, 17, 17, 17, 17, 17, 17, 17, 17},
		// 55
		{98, 103, 104, 18, 18, 18, 18, 18, 18, 10: 18, 18: 18, 107, 105, 106, 111, 110, 99, 18, 18, 112, 113, 18, 18, 18, 18},
		{98, 103, 104, 19, 19, 19, 19, 19, 19, 10: 19, 18: 19, 107, 105, 106, 111, 110, 99, 19, 19, 112, 113, 19, 19, 19, 19},
		{98, 20, 20, 20, 20, 20, 20, 20, 20, 10: 20, 18: 20, 20, 20, 20, 20, 20, 99, 20, 20, 20, 20, 20, 20, 20, 20},
		{98, 21, 21, 21, 21, 21, 21, 21, 21, 10: 21, 18: 21, 21, 21, 21, 21, 21, 99, 21, 21, 21, 21, 21, 21, 21, 21},
		{98, 22, 22, 22, 22, 22, 22, 22, 22, 10: 22, 18: 22, 22, 22, 22, 22, 22, 99, 22, 22, 22, 22, 22, 22, 22, 22},
		// 60
		{98, 23, 23, 23, 23, 23, 23, 23, 23, 10: 23, 18: 23, 107, 105, 106, 23, 23, 99, 23, 23, 23, 23, 23, 23, 23, 23},
		{98, 24, 24, 24, 24, 24, 24, 24, 24, 10: 24, 18: 24, 107, 105, 106, 24, 24, 99, 24, 24, 24, 24, 24, 24, 24, 24},
		{98, 103, 104, 25, 25, 25, 25, 25, 25, 10: 25, 18: 25, 107, 105, 106, 111, 110, 99, 25, 108, 112, 113, 109, 25, 25, 25},
		{98, 103, 104, 26, 26, 26, 26, 26, 26, 10: 26, 18: 26, 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 26, 26, 26},
		{98, 103, 104, 4: 45, 45, 45, 45, 45, 18: 45, 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101, 45, 45},
		// 65
		{5: 129, 32: 130},
		{5, 5, 5, 5, 6: 71, 9: 5, 11: 5, 5, 5, 5, 5, 5, 5, 38: 70, 40: 132, 46: 131},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 10: 30, 18: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 133},
		{4, 4, 4, 4, 4, 4, 71, 9: 4, 11: 4, 4, 4, 4, 4, 4, 4, 38: 72},
		// 70
		{98, 103, 104, 4: 44, 44, 44, 44, 44, 10: 44, 18: 44, 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101, 44, 44},
		{5: 129, 18: 135},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 10: 34, 18: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{98, 28, 28, 28, 28, 28, 28, 28, 28, 10: 28, 18: 28, 28, 28, 28, 28, 28, 99, 28, 28, 28, 28, 28, 28, 28, 28},
		{98, 29, 29, 29, 29, 29, 29, 29, 29, 10: 29, 18: 29, 29, 29, 29, 29, 29, 99, 29, 29, 29, 29, 29, 29, 29, 29},
		// 75
		{96, 94, 95, 93, 46, 46, 46, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 127, 43: 139},
		{4: 5, 129, 71, 38: 70, 40: 132, 46: 140},
		{4: 141},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 10: 32, 18: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 143},
		// 80
		{98, 103, 104, 18: 144, 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 10: 35, 18: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{156},
		{5: 13, 9: 148, 18: 13, 47: 147},
		{5: 150, 18: 149},
		// 85
		{5: 12, 18: 12},
		{3: 153},
		{6: 71, 9: 5, 38: 70, 40: 132, 46: 151},
		{9: 152},
		{5: 11, 18: 11},
		// 90
		{10, 10, 10, 10, 10, 10, 71, 8: 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 69, 65, 67, 44: 154, 66},
		{4: 155},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 10: 33, 18: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{5: 13, 9: 148, 18: 13, 47: 157},
		{5: 150, 18: 158},
		// 95
		{3: 159},
		{10, 10, 10, 10, 10, 10, 71, 8: 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 69, 65, 67, 44: 160, 66},
		{4: 161},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 10: 36, 18: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{96, 94, 95, 93, 5: 46, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 46, 33: 127, 43: 166},
		// 100
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 164},
		{98, 103, 104, 19: 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101, 32: 165},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 10: 31, 18: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{5: 129, 18: 167},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 10: 37, 18: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 105
		{4: 47, 129, 47, 47, 47, 31: 47},
		{98, 103, 104, 170, 19: 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101},
		{10, 10, 10, 10, 10, 10, 71, 8: 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 69, 65, 67, 44: 171, 66},
		{4: 172},
		{4: 50, 6: 50, 50, 50, 31: 50},
		// 110
		{10, 10, 10, 10, 10, 10, 71, 8: 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 179, 65, 67, 44: 178, 66, 138},
		{98, 103, 104, 175, 19: 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101},
		{10, 10, 10, 10, 10, 10, 71, 8: 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 69, 65, 67, 44: 176, 66},
		{4: 177},
		{4: 54, 6: 54, 54, 54},
		// 115
		{4: 180},
		{7, 7, 7, 7, 7, 7, 71, 9: 7, 7, 7, 7, 7, 7, 7, 7, 7, 34: 7, 7, 7, 7, 72, 7},
		{4: 55, 6: 55, 55, 55},
		{3: 183, 34: 182},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 186},
		// 120
		{10, 10, 10, 10, 10, 10, 71, 8: 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 69, 65, 67, 44: 184, 66},
		{4: 185},
		{4: 48, 6: 48, 48, 48, 31: 48},
		{98, 103, 104, 187, 19: 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101},
		{10, 10, 10, 10, 10, 10, 71, 8: 68, 10, 10, 10, 10, 10, 10, 10, 10, 10, 34: 10, 10, 10, 10, 70, 10, 69, 65, 67, 44: 188, 66},
		// 125
		{4: 189},
		{4: 49, 6: 49, 49, 49, 31: 49},
		{96, 94, 95, 93, 46, 46, 46, 46, 46, 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 127, 43: 191},
		{4: 57, 129, 57, 57, 57},
		{96, 94, 95, 93, 9: 85, 11: 89, 91, 92, 90, 86, 87, 88, 33: 193},
		// 130
		{98, 103, 104, 4: 58, 6: 58, 58, 58, 19: 107, 105, 106, 111, 110, 99, 102, 108, 112, 113, 109, 101},
		{4: 60, 6: 60, 60, 60},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 51

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmts = nil
		}
	case 2:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
			yylex.(*Lexer).result = yyVAL.stmts
		}
	case 3:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 4:
		{
			yyVAL.stmts = append(yyS[yypt-2].stmts, yyS[yypt-0].stmt)
		}
	case 5:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 6:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 8:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 9:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 10:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 11:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 12:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 13:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 14:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 15:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 16:
		{
			yyVAL.stmt_if = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 17:
		{
			yyVAL.exprs = nil
		}
	case 18:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 20:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 21:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 22:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 23:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 24:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 25:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 26:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 27:
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyS[yypt-6].token.Literal, Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 28:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
		}
	case 29:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 30:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 31:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-2].exprs}
		}
	case 32:
		{
			yyVAL.expr = &ast.ItemExpr{Value: &ast.IdentExpr{Literal: yyS[yypt-3].token.Literal}, Index: yyS[yypt-1].expr}
		}
	case 33:
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 34:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 35:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 36:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 37:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 38:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 40:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.ident_args = []string{}
		}
	case 51:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 52:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
