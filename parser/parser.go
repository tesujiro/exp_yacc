// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import "github.com/tesujiro/exp_yacc/ast"

type yySymType struct {
	yys        int
	token      ast.Token
	stmt_if    ast.Stmt
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault = 57361
	yyEofCode = 57344
	ELSE      = 57359
	EQEQ      = 57354
	FALSE     = 57350
	FUNC      = 57352
	GE        = 57356
	IDENT     = 57346
	IF        = 57358
	LE        = 57357
	NEQ       = 57355
	NIL       = 57351
	NUMBER    = 57347
	RETURN    = 57353
	STRING    = 57348
	TRUE      = 57349
	UNARY     = 57360
	yyErrCode = 57345

	yyMaxDepth = 200
	yyTabOfs   = -56
)

var (
	yyPrec = map[int]int{
		'=':   0,
		IDENT: 1,
		EQEQ:  2,
		NEQ:   2,
		'>':   3,
		'<':   3,
		GE:    3,
		LE:    3,
		'+':   4,
		'-':   4,
		'*':   5,
		'/':   5,
		'%':   5,
		UNARY: 6,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (80x)
		43:    1,  // '+' (78x)
		45:    2,  // '-' (78x)
		123:   3,  // '{' (75x)
		125:   4,  // '}' (67x)
		44:    5,  // ',' (66x)
		10:    6,  // '\n' (60x)
		57344: 7,  // $end (54x)
		59:    8,  // ';' (48x)
		57346: 9,  // IDENT (48x)
		61:    10, // '=' (45x)
		57350: 11, // FALSE (43x)
		57352: 12, // FUNC (43x)
		57351: 13, // NIL (43x)
		57347: 14, // NUMBER (43x)
		57348: 15, // STRING (43x)
		57349: 16, // TRUE (43x)
		41:    17, // ')' (40x)
		37:    18, // '%' (35x)
		42:    19, // '*' (35x)
		47:    20, // '/' (35x)
		60:    21, // '<' (35x)
		62:    22, // '>' (35x)
		91:    23, // '[' (35x)
		57359: 24, // ELSE (35x)
		57354: 25, // EQEQ (35x)
		57356: 26, // GE (35x)
		57357: 27, // LE (35x)
		57355: 28, // NEQ (35x)
		93:    29, // ']' (32x)
		57362: 30, // expr (27x)
		57358: 31, // IF (16x)
		57365: 32, // newLine (15x)
		57353: 33, // RETURN (15x)
		57366: 34, // newLines (12x)
		57363: 35, // exprs (8x)
		57368: 36, // opt_term (7x)
		57373: 37, // term (7x)
		57369: 38, // program (6x)
		57372: 39, // stmts (6x)
		57367: 40, // opt_newLines (4x)
		57364: 41, // ident_args (2x)
		57370: 42, // stmt (2x)
		57371: 43, // stmt_if (2x)
		57361: 44, // $default (0x)
		57345: 45, // error (0x)
		57360: 46, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"'{'",
		"'}'",
		"','",
		"'\\n'",
		"$end",
		"';'",
		"IDENT",
		"'='",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"')'",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'['",
		"ELSE",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"']'",
		"expr",
		"IF",
		"newLine",
		"RETURN",
		"newLines",
		"exprs",
		"opt_term",
		"term",
		"program",
		"stmts",
		"opt_newLines",
		"ident_args",
		"stmt",
		"stmt_if",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {38, 1},
		2:  {38, 2},
		3:  {39, 2},
		4:  {39, 3},
		5:  {42, 1},
		6:  {42, 3},
		7:  {42, 3},
		8:  {42, 1},
		9:  {43, 5},
		10: {43, 7},
		11: {43, 5},
		12: {43, 2},
		13: {35, 0},
		14: {35, 1},
		15: {35, 4},
		16: {30, 1},
		17: {30, 1},
		18: {30, 1},
		19: {30, 1},
		20: {30, 1},
		21: {30, 1},
		22: {30, 4},
		23: {30, 8},
		24: {30, 4},
		25: {30, 7},
		26: {30, 5},
		27: {30, 4},
		28: {30, 4},
		29: {30, 2},
		30: {30, 2},
		31: {30, 3},
		32: {30, 3},
		33: {30, 3},
		34: {30, 3},
		35: {30, 3},
		36: {30, 3},
		37: {30, 3},
		38: {30, 3},
		39: {30, 3},
		40: {30, 3},
		41: {30, 3},
		42: {30, 3},
		43: {41, 0},
		44: {41, 1},
		45: {41, 4},
		46: {36, 0},
		47: {36, 1},
		48: {37, 2},
		49: {37, 1},
		50: {37, 1},
		51: {40, 0},
		52: {40, 1},
		53: {34, 1},
		54: {34, 2},
		55: {32, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [113][]uint16{
		// 0
		{10, 10, 10, 10, 5: 10, 64, 10, 61, 10, 10, 10, 10, 10, 10, 10, 10, 31: 10, 63, 10, 62, 36: 58, 60, 57, 59},
		{7: 56},
		{85, 83, 84, 82, 55, 43, 7: 55, 9: 75, 43, 79, 81, 80, 76, 77, 78, 30: 71, 73, 33: 74, 35: 72, 42: 168, 70},
		{4: 10, 6: 64, 10, 61, 32: 63, 34: 62, 36: 67, 68},
		{9, 9, 9, 9, 9, 9, 7: 9, 9: 9, 9, 9, 9, 9, 9, 9, 9, 31: 9, 33: 9},
		// 5
		{6, 6, 6, 6, 6, 6, 64, 6, 9: 6, 6, 6, 6, 6, 6, 6, 6, 31: 6, 63, 6, 66},
		{7, 7, 7, 7, 7, 7, 64, 7, 9: 7, 7, 7, 7, 7, 7, 7, 7, 31: 7, 65, 7},
		{3, 3, 3, 3, 3, 3, 3, 3, 9: 3, 3, 3, 3, 3, 3, 3, 3, 31: 3, 33: 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 9: 1, 1, 1, 1, 1, 1, 1, 1, 31: 1, 33: 1},
		{2, 2, 2, 2, 2, 2, 2, 2, 9: 2, 2, 2, 2, 2, 2, 2, 2, 31: 2, 33: 2},
		// 10
		{8, 8, 8, 8, 8, 8, 64, 8, 9: 8, 8, 8, 8, 8, 8, 8, 8, 31: 8, 65, 8},
		{4: 54, 7: 54},
		{85, 83, 84, 82, 9, 43, 7: 9, 9: 75, 43, 79, 81, 80, 76, 77, 78, 30: 71, 73, 33: 74, 35: 72, 42: 69, 70},
		{4: 52, 6: 52, 52, 52},
		{4: 51, 6: 51, 51, 51, 24: 159},
		// 15
		{87, 90, 91, 4: 48, 42, 48, 48, 48, 10: 157, 18: 94, 92, 93, 98, 97, 88, 25: 95, 99, 100, 96},
		{5: 114, 10: 155},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 151},
		{85, 83, 84, 82, 43, 43, 43, 43, 43, 75, 11: 79, 81, 80, 76, 77, 78, 24: 43, 30: 112, 35: 150},
		{144, 40, 40, 40, 40, 40, 40, 40, 40, 10: 40, 17: 40, 40, 40, 40, 40, 40, 145, 40, 40, 40, 40, 40, 40},
		// 20
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 10: 39, 17: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 10: 38, 17: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 10: 37, 17: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 10: 36, 17: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 10: 35, 17: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		// 25
		{128, 9: 127},
		{5, 5, 5, 5, 5, 5, 64, 9: 5, 11: 5, 5, 5, 5, 5, 5, 32: 63, 34: 117, 40: 123},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 122},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 121},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 86},
		// 30
		{87, 90, 91, 17: 89, 94, 92, 93, 98, 97, 88, 25: 95, 99, 100, 96},
		{85, 83, 84, 82, 5: 43, 9: 75, 11: 79, 81, 80, 76, 77, 78, 43, 30: 112, 35: 119},
		{85, 83, 84, 82, 5: 43, 9: 75, 11: 79, 81, 80, 76, 77, 78, 29: 43, 112, 35: 113},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 10: 25, 17: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 111},
		// 35
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 110},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 109},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 108},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 107},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 106},
		// 40
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 105},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 104},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 103},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 102},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 101},
		// 45
		{87, 90, 91, 14, 14, 14, 14, 14, 14, 10: 14, 17: 14, 94, 92, 93, 14, 14, 88, 14, 14, 14, 14, 14, 14},
		{87, 90, 91, 15, 15, 15, 15, 15, 15, 10: 15, 17: 15, 94, 92, 93, 15, 15, 88, 15, 15, 15, 15, 15, 15},
		{87, 90, 91, 16, 16, 16, 16, 16, 16, 10: 16, 17: 16, 94, 92, 93, 16, 16, 88, 16, 16, 16, 16, 16, 16},
		{87, 90, 91, 17, 17, 17, 17, 17, 17, 10: 17, 17: 17, 94, 92, 93, 17, 17, 88, 17, 17, 17, 17, 17, 17},
		{87, 90, 91, 18, 18, 18, 18, 18, 18, 10: 18, 17: 18, 94, 92, 93, 98, 97, 88, 18, 18, 99, 100, 18, 18},
		// 50
		{87, 90, 91, 19, 19, 19, 19, 19, 19, 10: 19, 17: 19, 94, 92, 93, 98, 97, 88, 19, 19, 99, 100, 19, 19},
		{87, 20, 20, 20, 20, 20, 20, 20, 20, 10: 20, 17: 20, 20, 20, 20, 20, 20, 88, 20, 20, 20, 20, 20, 20},
		{87, 21, 21, 21, 21, 21, 21, 21, 21, 10: 21, 17: 21, 21, 21, 21, 21, 21, 88, 21, 21, 21, 21, 21, 21},
		{87, 22, 22, 22, 22, 22, 22, 22, 22, 10: 22, 17: 22, 22, 22, 22, 22, 22, 88, 22, 22, 22, 22, 22, 22},
		{87, 23, 23, 23, 23, 23, 23, 23, 23, 10: 23, 17: 23, 94, 92, 93, 23, 23, 88, 23, 23, 23, 23, 23, 23},
		// 55
		{87, 24, 24, 24, 24, 24, 24, 24, 24, 10: 24, 17: 24, 94, 92, 93, 24, 24, 88, 24, 24, 24, 24, 24, 24},
		{87, 90, 91, 4: 42, 42, 42, 42, 42, 17: 42, 94, 92, 93, 98, 97, 88, 42, 95, 99, 100, 96, 42},
		{5: 114, 29: 115},
		{5, 5, 5, 5, 6: 64, 9: 5, 11: 5, 5, 5, 5, 5, 5, 32: 63, 34: 117, 40: 116},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 10: 28, 17: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 60
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 118},
		{4, 4, 4, 4, 4, 4, 64, 9: 4, 11: 4, 4, 4, 4, 4, 4, 32: 65},
		{87, 90, 91, 4: 41, 41, 41, 41, 41, 10: 41, 17: 41, 94, 92, 93, 98, 97, 88, 41, 95, 99, 100, 96, 41},
		{5: 114, 17: 120},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 10: 32, 17: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		// 65
		{87, 26, 26, 26, 26, 26, 26, 26, 26, 10: 26, 17: 26, 26, 26, 26, 26, 26, 88, 26, 26, 26, 26, 26, 26},
		{87, 27, 27, 27, 27, 27, 27, 27, 27, 10: 27, 17: 27, 27, 27, 27, 27, 27, 88, 27, 27, 27, 27, 27, 27},
		{85, 83, 84, 82, 43, 43, 43, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 112, 35: 124},
		{4: 5, 114, 64, 32: 63, 34: 117, 40: 125},
		{4: 126},
		// 70
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 10: 30, 17: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{138},
		{5: 13, 9: 130, 17: 13, 41: 129},
		{5: 132, 17: 131},
		{5: 12, 17: 12},
		// 75
		{3: 135},
		{6: 64, 9: 5, 32: 63, 34: 117, 40: 133},
		{9: 134},
		{5: 11, 17: 11},
		{10, 10, 10, 10, 10, 10, 64, 8: 61, 10, 10, 10, 10, 10, 10, 10, 10, 31: 10, 63, 10, 62, 36: 58, 60, 136, 59},
		// 80
		{4: 137},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 10: 31, 17: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{5: 13, 9: 130, 17: 13, 41: 139},
		{5: 132, 17: 140},
		{3: 141},
		// 85
		{10, 10, 10, 10, 10, 10, 64, 8: 61, 10, 10, 10, 10, 10, 10, 10, 10, 31: 10, 63, 10, 62, 36: 58, 60, 142, 59},
		{4: 143},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 10: 33, 17: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{85, 83, 84, 82, 5: 43, 9: 75, 11: 79, 81, 80, 76, 77, 78, 43, 30: 112, 35: 148},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 146},
		// 90
		{87, 90, 91, 18: 94, 92, 93, 98, 97, 88, 25: 95, 99, 100, 96, 147},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 10: 29, 17: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{5: 114, 17: 149},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 10: 34, 17: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{4: 44, 114, 44, 44, 44, 24: 44},
		// 95
		{87, 90, 91, 152, 18: 94, 92, 93, 98, 97, 88, 25: 95, 99, 100, 96},
		{10, 10, 10, 10, 10, 10, 64, 8: 61, 10, 10, 10, 10, 10, 10, 10, 10, 31: 10, 63, 10, 62, 36: 58, 60, 153, 59},
		{4: 154},
		{4: 47, 6: 47, 47, 47, 24: 47},
		{85, 83, 84, 82, 43, 43, 43, 43, 43, 75, 11: 79, 81, 80, 76, 77, 78, 30: 112, 35: 156},
		// 100
		{4: 49, 114, 49, 49, 49},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 158},
		{87, 90, 91, 4: 50, 6: 50, 50, 50, 18: 94, 92, 93, 98, 97, 88, 25: 95, 99, 100, 96},
		{3: 161, 31: 160},
		{85, 83, 84, 82, 9: 75, 11: 79, 81, 80, 76, 77, 78, 30: 164},
		// 105
		{10, 10, 10, 10, 10, 10, 64, 8: 61, 10, 10, 10, 10, 10, 10, 10, 10, 31: 10, 63, 10, 62, 36: 58, 60, 162, 59},
		{4: 163},
		{4: 45, 6: 45, 45, 45, 24: 45},
		{87, 90, 91, 165, 18: 94, 92, 93, 98, 97, 88, 25: 95, 99, 100, 96},
		{10, 10, 10, 10, 10, 10, 64, 8: 61, 10, 10, 10, 10, 10, 10, 10, 10, 31: 10, 63, 10, 62, 36: 58, 60, 166, 59},
		// 110
		{4: 167},
		{4: 46, 6: 46, 46, 46, 24: 46},
		{4: 53, 6: 53, 53, 53},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 45

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmts = nil
		}
	case 2:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
			yylex.(*Lexer).result = yyVAL.stmts
		}
	case 3:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 4:
		{
			yyVAL.stmts = append(yyS[yypt-2].stmts, yyS[yypt-0].stmt)
		}
	case 5:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 6:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 7:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 8:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 9:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 10:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 11:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 12:
		{
			yyVAL.stmt_if = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 13:
		{
			yyVAL.exprs = nil
		}
	case 14:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 15:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 16:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 17:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 18:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 19:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 20:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 21:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 22:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 23:
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyS[yypt-6].token.Literal, Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 25:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-2].exprs}
		}
	case 27:
		{
			yyVAL.expr = &ast.ItemExpr{Value: &ast.IdentExpr{Literal: yyS[yypt-3].token.Literal}, Index: yyS[yypt-1].expr}
		}
	case 28:
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 29:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 30:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 31:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 32:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 33:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 34:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 35:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 36:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 38:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 40:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.ident_args = []string{}
		}
	case 44:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 45:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
