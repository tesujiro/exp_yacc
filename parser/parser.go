// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import "github.com/tesujiro/exp_yacc/ast"

type yySymType struct {
	yys        int
	token      ast.Token
	stmt_if    ast.Stmt
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	map_expr   map[ast.Expr]ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57373
	yyEofCode  = 57344
	ANDAND     = 57360
	BREAK      = 57364
	CONTINUE   = 57365
	DIVEQ      = 57371
	ELSE       = 57359
	EQEQ       = 57354
	FALSE      = 57350
	FOR        = 57363
	FUNC       = 57352
	GE         = 57356
	IDENT      = 57346
	IF         = 57358
	LE         = 57357
	LEN        = 57362
	MINUSEQ    = 57369
	MINUSMINUS = 57367
	MULEQ      = 57370
	NEQ        = 57355
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57361
	PLUSEQ     = 57368
	PLUSPLUS   = 57366
	RETURN     = 57353
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57372
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -72
)

var (
	yyPrec = map[int]int{
		'=':        0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		EQEQ:       4,
		NEQ:        4,
		'>':        5,
		'<':        5,
		GE:         5,
		LE:         5,
		'+':        6,
		'-':        6,
		PLUSPLUS:   6,
		MINUSMINUS: 6,
		'*':        7,
		'/':        7,
		'%':        7,
		UNARY:      8,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (114x)
		43:    1,  // '+' (111x)
		45:    2,  // '-' (111x)
		91:    3,  // '[' (111x)
		123:   4,  // '{' (103x)
		125:   5,  // '}' (86x)
		44:    6,  // ',' (82x)
		10:    7,  // '\n' (82x)
		57344: 8,  // $end (68x)
		57346: 9,  // IDENT (65x)
		59:    10, // ';' (64x)
		57350: 11, // FALSE (60x)
		57352: 12, // FUNC (60x)
		57362: 13, // LEN (60x)
		57351: 14, // NIL (60x)
		57347: 15, // NUMBER (60x)
		57348: 16, // STRING (60x)
		57349: 17, // TRUE (60x)
		61:    18, // '=' (58x)
		37:    19, // '%' (51x)
		41:    20, // ')' (51x)
		42:    21, // '*' (51x)
		47:    22, // '/' (51x)
		60:    23, // '<' (51x)
		62:    24, // '>' (51x)
		57360: 25, // ANDAND (51x)
		57371: 26, // DIVEQ (51x)
		57354: 27, // EQEQ (51x)
		57356: 28, // GE (51x)
		57357: 29, // LE (51x)
		57369: 30, // MINUSEQ (51x)
		57367: 31, // MINUSMINUS (51x)
		57370: 32, // MULEQ (51x)
		57355: 33, // NEQ (51x)
		57361: 34, // OROR (51x)
		57368: 35, // PLUSEQ (51x)
		57366: 36, // PLUSPLUS (51x)
		93:    37, // ']' (50x)
		57359: 38, // ELSE (45x)
		58:    39, // ':' (39x)
		57374: 40, // expr (39x)
		57378: 41, // newLine (21x)
		57358: 42, // IF (19x)
		57364: 43, // BREAK (18x)
		57365: 44, // CONTINUE (18x)
		57363: 45, // FOR (18x)
		57353: 46, // RETURN (18x)
		57379: 47, // newLines (17x)
		57381: 48, // opt_term (9x)
		57386: 49, // term (9x)
		57375: 50, // exprs (8x)
		57380: 51, // opt_newLines (8x)
		57382: 52, // program (8x)
		57385: 53, // stmts (8x)
		57376: 54, // ident_args (2x)
		57383: 55, // stmt (2x)
		57384: 56, // stmt_if (2x)
		57377: 57, // map_expr (1x)
		57373: 58, // $default (0x)
		57345: 59, // error (0x)
		57372: 60, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"'['",
		"'{'",
		"'}'",
		"','",
		"'\\n'",
		"$end",
		"IDENT",
		"';'",
		"FALSE",
		"FUNC",
		"LEN",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'='",
		"'%'",
		"')'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"ANDAND",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"']'",
		"ELSE",
		"':'",
		"expr",
		"newLine",
		"IF",
		"BREAK",
		"CONTINUE",
		"FOR",
		"RETURN",
		"newLines",
		"opt_term",
		"term",
		"exprs",
		"opt_newLines",
		"program",
		"stmts",
		"ident_args",
		"stmt",
		"stmt_if",
		"map_expr",
		"$default",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {52, 1},
		2:  {52, 2},
		3:  {53, 2},
		4:  {53, 3},
		5:  {55, 3},
		6:  {55, 3},
		7:  {55, 1},
		8:  {55, 4},
		9:  {55, 5},
		10: {55, 1},
		11: {55, 1},
		12: {55, 1},
		13: {56, 5},
		14: {56, 7},
		15: {56, 5},
		16: {56, 2},
		17: {50, 0},
		18: {50, 1},
		19: {50, 4},
		20: {40, 1},
		21: {40, 1},
		22: {40, 1},
		23: {40, 1},
		24: {40, 1},
		25: {40, 1},
		26: {40, 4},
		27: {40, 8},
		28: {40, 4},
		29: {40, 4},
		30: {40, 7},
		31: {40, 5},
		32: {40, 5},
		33: {40, 4},
		34: {40, 4},
		35: {40, 2},
		36: {40, 2},
		37: {40, 3},
		38: {40, 3},
		39: {40, 3},
		40: {40, 3},
		41: {40, 3},
		42: {40, 3},
		43: {40, 3},
		44: {40, 3},
		45: {40, 2},
		46: {40, 2},
		47: {40, 3},
		48: {40, 3},
		49: {40, 3},
		50: {40, 3},
		51: {40, 3},
		52: {40, 3},
		53: {40, 3},
		54: {40, 3},
		55: {40, 3},
		56: {40, 3},
		57: {57, 3},
		58: {57, 6},
		59: {54, 0},
		60: {54, 1},
		61: {54, 4},
		62: {48, 0},
		63: {48, 1},
		64: {49, 2},
		65: {49, 1},
		66: {49, 1},
		67: {51, 0},
		68: {51, 1},
		69: {47, 1},
		70: {47, 2},
		71: {41, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [155][]uint16{
		// 0
		{10, 10, 10, 10, 10, 6: 10, 80, 10, 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 78, 74, 76, 52: 73, 75},
		{8: 72},
		{106, 104, 105, 102, 103, 71, 55, 8: 71, 94, 11: 98, 100, 101, 99, 95, 96, 97, 55, 40: 86, 42: 92, 90, 91, 89, 93, 50: 87, 55: 226, 88},
		{5: 10, 7: 80, 10, 10: 77, 41: 79, 47: 78, 83, 84},
		{9, 9, 9, 9, 9, 9, 9, 8: 9, 9, 11: 9, 9, 9, 9, 9, 9, 9, 9, 42: 9, 9, 9, 9, 9},
		// 5
		{6, 6, 6, 6, 6, 6, 6, 80, 6, 6, 11: 6, 6, 6, 6, 6, 6, 6, 6, 41: 79, 6, 6, 6, 6, 6, 82},
		{7, 7, 7, 7, 7, 7, 7, 80, 7, 7, 11: 7, 7, 7, 7, 7, 7, 7, 7, 41: 81, 7, 7, 7, 7, 7},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 11: 3, 3, 3, 3, 3, 3, 3, 3, 37: 3, 42: 3, 3, 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11: 1, 1, 1, 1, 1, 1, 1, 1, 37: 1, 42: 1, 1, 1, 1, 1},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 11: 2, 2, 2, 2, 2, 2, 2, 2, 37: 2, 42: 2, 2, 2, 2, 2},
		// 10
		{8, 8, 8, 8, 8, 8, 8, 80, 8, 8, 11: 8, 8, 8, 8, 8, 8, 8, 8, 41: 81, 8, 8, 8, 8, 8},
		{5: 70, 8: 70},
		{106, 104, 105, 102, 103, 9, 55, 8: 9, 94, 11: 98, 100, 101, 99, 95, 96, 97, 55, 40: 86, 42: 92, 90, 91, 89, 93, 50: 87, 55: 85, 88},
		{5: 68, 7: 68, 68, 10: 68},
		{108, 113, 114, 109, 5: 60, 54, 60, 60, 10: 60, 18: 224, 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		// 15
		{6: 149, 18: 222},
		{5: 65, 7: 65, 65, 10: 65, 38: 213},
		{106, 104, 105, 102, 205, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 206},
		{5: 62, 7: 62, 62, 10: 62},
		{5: 61, 7: 61, 61, 10: 61},
		// 20
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 201},
		{106, 104, 105, 102, 103, 55, 55, 55, 55, 94, 55, 98, 100, 101, 99, 95, 96, 97, 38: 55, 40: 147, 50: 200},
		{194, 52, 52, 195, 52, 52, 52, 52, 52, 10: 52, 18: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 10: 51, 18: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 10: 50, 18: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		// 25
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 10: 49, 18: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 10: 48, 18: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 10: 47, 18: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{178, 9: 177},
		{174},
		// 30
		{5, 5, 5, 5, 5, 6: 5, 80, 9: 5, 11: 5, 5, 5, 5, 5, 5, 5, 37: 5, 41: 79, 47: 152, 51: 170},
		{5, 5, 5, 5, 5, 7: 80, 9: 5, 11: 5, 5, 5, 5, 5, 5, 5, 41: 79, 47: 152, 51: 158},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 157},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 156},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 107},
		// 35
		{108, 113, 114, 109, 19: 117, 110, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		{106, 104, 105, 102, 103, 6: 55, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 20: 55, 40: 147, 50: 154},
		{106, 104, 105, 102, 103, 6: 55, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 37: 55, 40: 147, 50: 148},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 10: 35, 18: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 146},
		// 40
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 145},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 144},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 143},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 142},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 141},
		// 45
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 140},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 10: 27, 18: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 10: 26, 18: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 139},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 138},
		// 50
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 137},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 136},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 135},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 134},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 133},
		// 55
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 132},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 131},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 130},
		{108, 113, 114, 109, 16, 16, 16, 16, 16, 10: 16, 18: 16, 117, 16, 115, 116, 16, 16, 16, 123, 16, 16, 16, 121, 119, 122, 16, 16, 120, 118, 16, 16, 16},
		{108, 113, 114, 109, 17, 17, 17, 17, 17, 10: 17, 18: 17, 117, 17, 115, 116, 17, 17, 17, 123, 17, 17, 17, 121, 119, 122, 17, 17, 120, 118, 17, 17, 17},
		// 60
		{108, 113, 114, 109, 18, 18, 18, 18, 18, 10: 18, 18: 18, 117, 18, 115, 116, 18, 18, 18, 123, 18, 18, 18, 121, 119, 122, 18, 18, 120, 118, 18, 18, 18},
		{108, 113, 114, 109, 19, 19, 19, 19, 19, 10: 19, 18: 19, 117, 19, 115, 116, 19, 19, 19, 123, 19, 19, 19, 121, 119, 122, 19, 19, 120, 118, 19, 19, 19},
		{108, 113, 114, 109, 20, 20, 20, 20, 20, 10: 20, 18: 20, 117, 20, 115, 116, 127, 126, 20, 123, 20, 128, 129, 121, 119, 122, 20, 20, 120, 118, 20, 20, 20},
		{108, 113, 114, 109, 21, 21, 21, 21, 21, 10: 21, 18: 21, 117, 21, 115, 116, 127, 126, 21, 123, 21, 128, 129, 121, 119, 122, 21, 21, 120, 118, 21, 21, 21},
		{108, 113, 114, 109, 22, 22, 22, 22, 22, 10: 22, 18: 22, 117, 22, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 22, 22, 22},
		// 65
		{108, 113, 114, 109, 23, 23, 23, 23, 23, 10: 23, 18: 23, 117, 23, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 23, 23, 23},
		{108, 113, 114, 109, 24, 24, 24, 24, 24, 10: 24, 18: 24, 117, 24, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 24, 24, 24},
		{108, 113, 114, 109, 25, 25, 25, 25, 25, 10: 25, 18: 25, 117, 25, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 25, 25, 25},
		{108, 28, 28, 109, 28, 28, 28, 28, 28, 10: 28, 18: 28, 28, 28, 28, 28, 28, 28, 28, 123, 28, 28, 28, 121, 28, 122, 28, 28, 120, 28, 28, 28, 28},
		{108, 29, 29, 109, 29, 29, 29, 29, 29, 10: 29, 18: 29, 29, 29, 29, 29, 29, 29, 29, 123, 29, 29, 29, 121, 29, 122, 29, 29, 120, 29, 29, 29, 29},
		// 70
		{108, 30, 30, 109, 30, 30, 30, 30, 30, 10: 30, 18: 30, 30, 30, 30, 30, 30, 30, 30, 123, 30, 30, 30, 121, 30, 122, 30, 30, 120, 30, 30, 30, 30},
		{108, 31, 31, 109, 31, 31, 31, 31, 31, 10: 31, 18: 31, 117, 31, 115, 116, 31, 31, 31, 123, 31, 31, 31, 121, 31, 122, 31, 31, 120, 31, 31, 31, 31},
		{108, 32, 32, 109, 32, 32, 32, 32, 32, 10: 32, 18: 32, 117, 32, 115, 116, 32, 32, 32, 123, 32, 32, 32, 121, 32, 122, 32, 32, 120, 32, 32, 32, 32},
		{108, 113, 114, 109, 33, 33, 33, 33, 33, 10: 33, 18: 33, 117, 33, 115, 116, 127, 126, 33, 123, 124, 128, 129, 121, 119, 122, 125, 33, 120, 118, 33, 33, 33},
		{108, 113, 114, 109, 34, 34, 34, 34, 34, 10: 34, 18: 34, 117, 34, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 34, 120, 118, 34, 34, 34},
		// 75
		{108, 113, 114, 109, 5: 54, 54, 54, 54, 10: 54, 19: 117, 54, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 54, 54},
		{6: 149, 37: 150},
		{5, 5, 5, 5, 5, 7: 80, 9: 5, 11: 5, 5, 5, 5, 5, 5, 5, 41: 79, 47: 152, 51: 151},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 10: 38, 18: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 153},
		// 80
		{4, 4, 4, 4, 4, 4, 4, 80, 9: 4, 11: 4, 4, 4, 4, 4, 4, 4, 37: 4, 41: 81},
		{108, 113, 114, 109, 5: 53, 53, 53, 53, 10: 53, 18: 53, 117, 53, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 53, 53},
		{6: 149, 20: 155},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 10: 43, 18: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{108, 36, 36, 109, 36, 36, 36, 36, 36, 10: 36, 18: 36, 36, 36, 36, 36, 36, 36, 36, 123, 36, 36, 36, 121, 36, 122, 36, 36, 120, 36, 36, 36, 36},
		// 85
		{108, 37, 37, 109, 37, 37, 37, 37, 37, 10: 37, 18: 37, 37, 37, 37, 37, 37, 37, 37, 123, 37, 37, 37, 121, 37, 122, 37, 37, 120, 37, 37, 37, 37},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 159, 57: 160},
		{108, 113, 114, 109, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 39: 168},
		{5: 5, 162, 80, 41: 79, 47: 152, 51: 161},
		{5: 167},
		// 90
		{5, 5, 5, 5, 5, 7: 80, 9: 5, 11: 5, 5, 5, 5, 5, 5, 5, 41: 79, 47: 152, 51: 163},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 164},
		{108, 113, 114, 109, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 39: 165},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 166},
		{108, 113, 114, 109, 5: 14, 14, 14, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		// 95
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 10: 40, 18: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 169},
		{108, 113, 114, 109, 5: 15, 15, 15, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		{106, 104, 105, 102, 103, 6: 55, 55, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 37: 55, 40: 147, 50: 171},
		{6: 149, 80, 37: 5, 41: 79, 47: 152, 51: 172},
		// 100
		{37: 173},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 10: 41, 18: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 175},
		{108, 113, 114, 109, 19: 117, 176, 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 10: 44, 18: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		// 105
		{188},
		{6: 13, 9: 180, 20: 13, 54: 179},
		{6: 182, 20: 181},
		{6: 12, 20: 12},
		{4: 185},
		// 110
		{7: 80, 9: 5, 41: 79, 47: 152, 51: 183},
		{9: 184},
		{6: 11, 20: 11},
		{10, 10, 10, 10, 10, 10, 10, 80, 9: 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 78, 74, 76, 52: 186, 75},
		{5: 187},
		// 115
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 10: 42, 18: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{6: 13, 9: 180, 20: 13, 54: 189},
		{6: 182, 20: 190},
		{4: 191},
		{10, 10, 10, 10, 10, 10, 10, 80, 9: 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 78, 74, 76, 52: 192, 75},
		// 120
		{5: 193},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 10: 45, 18: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{106, 104, 105, 102, 103, 6: 55, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 20: 55, 40: 147, 50: 198},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 196},
		{108, 113, 114, 109, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118, 197},
		// 125
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 10: 39, 18: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{6: 149, 20: 199},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 10: 46, 18: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{5: 56, 149, 56, 56, 10: 56, 38: 56},
		{108, 113, 114, 109, 202, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		// 130
		{10, 10, 10, 10, 10, 10, 10, 80, 9: 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 78, 74, 76, 52: 203, 75},
		{5: 204},
		{5: 59, 7: 59, 59, 10: 59, 38: 59},
		{10, 10, 10, 10, 10, 10, 10, 80, 9: 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 211, 74, 76, 51: 158, 210, 75},
		{108, 113, 114, 109, 207, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		// 135
		{10, 10, 10, 10, 10, 10, 10, 80, 9: 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 78, 74, 76, 52: 208, 75},
		{5: 209},
		{5: 63, 7: 63, 63, 10: 63},
		{5: 212},
		{7, 7, 7, 7, 7, 7, 7, 80, 9: 7, 11: 7, 7, 7, 7, 7, 7, 7, 7, 41: 81, 7, 7, 7, 7, 7},
		// 140
		{5: 64, 7: 64, 64, 10: 64},
		{4: 215, 42: 214},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 218},
		{10, 10, 10, 10, 10, 10, 10, 80, 9: 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 78, 74, 76, 52: 216, 75},
		{5: 217},
		// 145
		{5: 57, 7: 57, 57, 10: 57, 38: 57},
		{108, 113, 114, 109, 219, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		{10, 10, 10, 10, 10, 10, 10, 80, 9: 10, 77, 10, 10, 10, 10, 10, 10, 10, 10, 41: 79, 10, 10, 10, 10, 10, 78, 74, 76, 52: 220, 75},
		{5: 221},
		{5: 58, 7: 58, 58, 10: 58, 38: 58},
		// 150
		{106, 104, 105, 102, 103, 55, 55, 55, 55, 94, 55, 98, 100, 101, 99, 95, 96, 97, 40: 147, 50: 223},
		{5: 66, 149, 66, 66, 10: 66},
		{106, 104, 105, 102, 103, 9: 94, 11: 98, 100, 101, 99, 95, 96, 97, 40: 225},
		{108, 113, 114, 109, 5: 67, 7: 67, 67, 10: 67, 19: 117, 21: 115, 116, 127, 126, 112, 123, 124, 128, 129, 121, 119, 122, 125, 111, 120, 118},
		{5: 69, 7: 69, 69, 10: 69},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 59

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmts = nil
		}
	case 2:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
			yylex.(*Lexer).result = yyVAL.stmts
		}
	case 3:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 4:
		{
			yyVAL.stmts = append(yyS[yypt-2].stmts, yyS[yypt-0].stmt)
		}
	case 5:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 6:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 8:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 9:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 10:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 11:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 12:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 13:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 14:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 15:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 16:
		{
			yyVAL.stmt_if = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 17:
		{
			yyVAL.exprs = nil
		}
	case 18:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 20:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 21:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 22:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 23:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 24:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 25:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 26:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 27:
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyS[yypt-6].token.Literal, Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 28:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
		}
	case 29:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 30:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 31:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-2].exprs}
		}
	case 32:
		{
			yyVAL.expr = &ast.MapExpr{MapExpr: yyS[yypt-2].map_expr}
		}
	case 33:
		{
			yyVAL.expr = &ast.ItemExpr{Value: &ast.IdentExpr{Literal: yyS[yypt-3].token.Literal}, Index: yyS[yypt-1].expr}
		}
	case 34:
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 35:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 36:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 38:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 40:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++"}
		}
	case 46:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--"}
		}
	case 47:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			mapExpr := make(map[ast.Expr]ast.Expr)
			mapExpr[yyS[yypt-2].expr] = yyS[yypt-0].expr
			yyVAL.map_expr = mapExpr
		}
	case 58:
		{
			yyS[yypt-5].map_expr[yyS[yypt-2].expr] = yyS[yypt-0].expr
		}
	case 59:
		{
			yyVAL.ident_args = []string{}
		}
	case 60:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 61:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
